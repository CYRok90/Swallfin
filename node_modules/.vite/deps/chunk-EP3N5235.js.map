{
  "version": 3,
  "sources": ["../../@evidence-dev/sdk/src/utils/svelte/inputs.js", "../../@evidence-dev/sdk/src/utils/svelte/addBasePath.js", "../../@evidence-dev/sdk/src/utils/svelte/index.js"],
  "sourcesContent": ["import { getAllContexts, getContext, setContext } from 'svelte';\nimport { get, readable, readonly, writable } from 'svelte/store';\n\nexport const InputStoreKey = Symbol('InputStore');\n\n/** @template T; @typedef {import(\"svelte/store\").Readable<T>} Readable */\n/** @template T; @typedef {import(\"svelte/store\").Writable<T>} Writable */\n\n/**\n * @typedef {Object} InputValue\n * @property {any} value\n * @property {string} label\n */\n\n/**\n * @param {unknown} v\n * @returns {v is Readable<any>}\n */\nexport const isReadable = (v) => {\n\tif (typeof v !== 'object') return false;\n\tif (v === null) return false;\n\treturn 'subscribe' in v;\n};\n/**\n * @param {unknown} v\n * @returns {v is Writable<any>}\n */\nconst isWritable = (v) => {\n\tif (!isReadable(v)) return false;\n\treturn 'set' in v && 'update' in v;\n};\n\n/**\n * @param {Writable<any>} c\n * @returns {Writable<any>}\n */\nexport const ensureInputContext = (c) => {\n\tif (!isWritable(c)) {\n\t\tconsole.error({ InputStoreValue: c });\n\t\tthrow new Error('InputStore must be a writable store');\n\t}\n\tif (!getAllContexts().has(InputStoreKey)) {\n\t\tsetContext(InputStoreKey, c);\n\t\treturn c;\n\t} else {\n\t\tconst existingValue = getContext(InputStoreKey);\n\t\texistingValue.set(get(c));\n\t\treturn existingValue;\n\t}\n};\n\n/**\n * @returns {Writable<any>}\n * @deprecated use 'getInputSetter' whenever possible\n */\nexport const getInputContext = () => {\n\tif (!getAllContexts().has(InputStoreKey)) {\n\t\tconsole.warn('InputStoreKey not found in context. Did you forget to call ensureInputContext?');\n\t\treturn writable({});\n\t}\n\treturn getContext(InputStoreKey);\n};\n\n/**\n *\n * @returns {import(\"svelte/store\").Readable<any>}\n */\nexport const getReadonlyInputContext = () => {\n\tif (!getAllContexts().has(InputStoreKey)) {\n\t\tconsole.warn('InputStoreKey not found in context. Did you forget to call ensureInputContext?');\n\t\treturn readable({});\n\t}\n\n\tconst value = getContext(InputStoreKey);\n\tif (isReadable(value)) {\n\t\treturn readonly(value);\n\t} else {\n\t\tthrow new Error(`InputStoreKey is not a readable store: ${value}`);\n\t}\n};\n\n/**\n * Returns a factory function used to interact with the input store at the specified path.\n * @param {string | string[]} inputKey\n * @param {boolean} [toggle]\n * @param {string} [defaultSqlFragment]\n */\nexport const getInputSetter = (inputKey, toggle, defaultSqlFragment) => {\n\tconst inputs = getInputContext();\n\tlet inputPath = Array.isArray(inputKey) ? inputKey : [inputKey];\n\tif (!inputPath.length) {\n\t\treturn () => {\n\t\t\tconsole.warn(`Failed to update input: ${inputPath} is not a valid input path`);\n\t\t};\n\t}\n\t/**\n\t * @param {any} value\n\t * @param {string} [label]\n\t * @param {string} [sqlFragment]\n\t * @param {any} [additional]\n\t */\n\treturn (value, label, sqlFragment, additional) => {\n\t\tinputs.update(($inputs) => {\n\t\t\tlet target = $inputs;\n\t\t\tlet finalKey = inputPath.at(-1) ?? '';\n\t\t\tfor (const p of inputPath.slice(0, -1)) {\n\t\t\t\ttarget = target[p];\n\t\t\t}\n\t\t\tif (!value && !label) {\n\t\t\t\ttarget[finalKey] = {\n\t\t\t\t\ttoString() {\n\t\t\t\t\t\treturn defaultSqlFragment;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn $inputs;\n\t\t\t}\n\t\t\tconst result = {\n\t\t\t\t...additional,\n\t\t\t\tvalue,\n\t\t\t\tlabel,\n\t\t\t\ttoString() {\n\t\t\t\t\treturn sqlFragment;\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (toggle && JSON.stringify(target[finalKey]) === JSON.stringify(result)) {\n\t\t\t\ttarget[finalKey] = {\n\t\t\t\t\ttoString() {\n\t\t\t\t\t\treturn defaultSqlFragment;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\ttarget[finalKey] = result;\n\t\t\t}\n\n\t\t\treturn $inputs;\n\t\t});\n\t};\n};\n", "/**\n * Adjusts a path to include the configured base path\n * Ignores undefined, and absolute URLs\n * @template T\n * @param {T} path\n * @param {import(\"../../configuration/schemas/config.schema.js\").EvidenceConfig} config\n * @example addBasePath('http://localhost:3000/test') // 'http://localhost:3000/test'\n * @example addBasePath('/test') // '/base/test'\n * @example addBasePath(undefined) // undefined\n *\n * @returns {T | string}\n */\nexport const addBasePath = (path, config) => {\n\t/** @type {string} */\n\tlet _path;\n\n\tif (path instanceof String) {\n\t\t_path = path.toString();\n\t} else if (typeof path !== 'string') {\n\t\treturn path;\n\t} else {\n\t\t_path = path;\n\t}\n\n\tif (_path.startsWith('http')) return _path;\n\tif (_path.startsWith('#')) return _path; // ignore hash links\n\tif (/^[^/]*:/.test(_path)) return _path; // ignore other protocols\n\n\tlet basePath = config.deployment.basePath;\n\tif (basePath) {\n\t\tif (!basePath?.startsWith('/')) {\n\t\t\tbasePath = `/${basePath}`;\n\t\t}\n\t\tif (basePath.endsWith('/')) {\n\t\t\tbasePath = basePath.slice(0, -1);\n\t\t}\n\t\tif (_path.startsWith(basePath)) return _path;\n\t\tif (!_path.startsWith('/')) {\n\t\t\t_path = `/${_path}`;\n\t\t}\n\t\treturn `${basePath}${_path}`;\n\t} else {\n\t\treturn _path;\n\t}\n};\n", "export * from './inputs.js';\nimport { addBasePath as _addBasePath } from './addBasePath.js';\nimport { config } from '$evidence/config';\n/** @type {(path: string) => string} */\nexport const addBasePath = (path) => _addBasePath(path, config);\n"],
  "mappings": "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",
  "names": ["config", "addBasePath"]
}
