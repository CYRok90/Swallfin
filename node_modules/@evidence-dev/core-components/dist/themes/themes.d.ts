/// <reference types="svelte" />
export class ThemeStores {
    /**
     * @template T
     * @param {T} input
     * @param {'light' | 'dark'} appearance
     * @returns {string | T | undefined}
     */
    static "__#5@#resolveColor": <T_4>(input: T_4, appearance: 'light' | 'dark') => string | T_4 | undefined;
    get systemTheme(): import("svelte/store").Readable<"light" | "dark">;
    get selectedAppearance(): import("svelte/store").Readable<"light" | "dark" | "system">;
    get activeAppearance(): import("svelte/store").Readable<"light" | "dark">;
    get theme(): import("svelte/store").Readable<any>;
    get themesConfig(): any;
    /** @param {HTMLElement} element */
    syncThemeAttribute: (element: HTMLElement) => () => void;
    /** @param {'light' | 'dark' | 'system'} appearance */
    setAppearance: (appearance: 'light' | 'dark' | 'system') => void;
    cycleAppearance: () => void;
    /**
     * @template T
     * @param {T} input
     * @returns {Readable<string | T | undefined>}
     */
    resolveColor: <T>(input: T) => import("svelte/store").Readable<string | T | undefined>;
    /**
     * @template T
     * @param {Record<string, T> | undefined} input
     * @returns {Readable<Record<string, (string | T | undefined)> | undefined>}
     */
    resolveColorsObject: <T_1>(input: Record<string, T_1> | undefined) => import("svelte/store").Readable<Record<string, string | T_1 | undefined> | undefined>;
    /**
     * @template T
     * @param {T} input
     * @returns {Readable<T | string[] | (T[number])[] | undefined>}
     */
    resolveColorPalette: <T_2>(input: T_2) => import("svelte/store").Readable<string[] | T_2 | T_2[number][] | undefined>;
    /**
     * @template T
     * @param {T} input
     * @returns {Readable<string[] | (T[number])[] | undefined>}
     */
    resolveColorScale: <T_3>(input: T_3) => import("svelte/store").Readable<string[] | T_3[number][] | undefined>;
    #private;
}
export function getThemeStores(): ThemeStores;
export type Readable<T> = import("svelte/store").Readable<T>;
export type Writable<T> = import("svelte/store").Writable<T>;
export type Theme = any;
export type ThemesConfig = any;
export type StringTuple = [string] | [string, string];
